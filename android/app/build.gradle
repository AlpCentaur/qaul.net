apply plugin: 'com.android.application'
android {
    compileSdkVersion 17
    buildToolsVersion "25.0.0"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 17

        project.ext.set("archivesBaseName", "qaul")
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        debug {
            minifyEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    productFlavors {
        // the original qaul variant
        legacy {
            applicationId "net.qaul.qaul"
            ndk {
                abiFilters 'armeabi'
            }
            externalNativeBuild {
                cmake {
                    cppFlags ""
                    //targets "nativetask", "hardware_legacy", "wificonfig", "tether", "reallibqaul"
                    //arguments "-DANDROID_REWRITE_HACK_LIBONLY=OFF", "-DEXTRALIB_PATH=${EXTRALIB_PATH}", "-DANDROID_TOOLCHAIN=gcc", "-DANDROID_ARM_MODE=arm"
                    targets "reallibqaul"
                    arguments "-DANDROID_TOOLCHAIN=gcc", "-DANDROID_REWRITE_HACK_LIBONLY=ON"
                }
            }
        }
        // native android ui
        nativeui {
            applicationId 'net.qaul.nativeui'
            externalNativeBuild {
                cmake {
                    cppFlags ""
                    targets "reallibqaul"
                    arguments "-DANDROID_TOOLCHAIN=gcc", "-DANDROID_REWRITE_HACK_LIBONLY=ON"
                }
            }
        }
        // no root required
        noroot {
            applicationId "net.qaul.noroot"
            externalNativeBuild {
                cmake {
                    cppFlags ""
                    targets "reallibqaul"
                    arguments "-DANDROID_TOOLCHAIN=gcc", "-DANDROID_REWRITE_HACK_LIBONLY=ON"
                }
            }
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFile = new File(
                    output.outputFile.parent,
                    output.outputFile.name.replace(".apk", "-${variant.versionName}.apk"))
        }
    }

    applicationVariants.all { variant ->
        def vname = "${variant.name.capitalize()}"
        def enbTask = project.tasks.getByName("externalNativeBuild${vname}")

        task("generate${vname}JavaH") {
            def outputFile = file("${enbTask.getObjFolder()}/include/qaul/jni/native.h")
            outputs.file outputFile

            dependsOn "compile${vname}JavaWithJavac"

            doLast {
                exec {
                    executable org.gradle.internal.jvm.Jvm.current().getExecutable('javah')
                    args "-o", outputFile
                    args "-classpath", "${project.tasks.getByName("compile${vname}JavaWithJavac").destinationDir}:${android.getBootClasspath()[0]}"
                    args "net.qaul.qaul.NativeQaul"
                }
            }
        }
        enbTask.dependsOn "generate${vname}JavaH"
    }
}

dependencies {
}
