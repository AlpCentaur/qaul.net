variables:
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - build
  - deploy
  - fat_build
  - fat_deploy


###################################################
# Nightly Builds
###################################################

Nightly Ubuntu 16.04 32-bit:
  stage: build
  script:
    - mkdir build; cd build; cmake ..; make package
    #- cp *.deb /artifacts/nightly/
  only:
    - qaul-ng
  tags:
    - ubuntu1604_32

Nightly Ubuntu 16.04 64:
  stage: build
  script:
    - mkdir build; cd build; cmake ..; make package
    #- cp *.deb /artifacts/nightly/
  only:
    - qaul-ng
  tags:
    - ubuntu1604_64

Raspian Stretch:
  stage: build
  script:
    - mkdir build; cd build; cmake .. -DRaspberry=1; make package VERBOSE=1
  only:
    - qaul-ng
  tags:
    - raspian-stretch

Nightly Copy OSX:
  stage: build
  script:
    - mkdir build; cd build; cmake ..; make
    - ./make_dmg.sh
    #- qaulcopynightly
  only:
    - qaul-ng
  tags:
    - osx

Nightly Copy Android:
  stage: build
  script:
    - mkdir build; cd build
    - cmake ../ -DPORT=ANDROID -DSDK_ROOT=$ANDROID_SDK -DNDK_ROOT=$ANDROID_NDK -DEXTRALIB_PATH=$ANDROID_LIBRARIES -DANDROID_EABI=$ANDROID_EABI
    - make
    #- cp android/app/src/main/bin/QaulActivity-debug.apk /artifacts/nightly/
  only:
    - qaul-ng
  tags:
    - android

Nightly Copy Windows:
  stage: build
  script:
    - PATH="/mingw32/bin:$PATH"; declare -x MSYSTEM="MINGW32"; declare -x MSYSCON="mintty.exe"
    - mkdir build; cd build; cmake .. -G "MSYS Makefiles" -DGUI=NATIVE; make
    - cd src/client/win; mkdir build; cd build; cmake ..
    - cmake --build . --target qaul --config Debug
    - cpack -C Debug
    #- cp *.exe //VBOXSVR/artifacts/nightly/
  only:
    - qaul-ng
  tags:
    - windows

#Nightly Deploy:
#  stage: deploy
#  script:
#    - qaulnightlydeploy $CI_BUILD_REF
#  only:
#    - qaul-ng
#  tags:
#    - buildserver


###################################################
# Test Builds
###################################################

##### linuxe

.tb_base: &tb_def
  stage: build
  when: manual
  allow_failure: false
  cache:
    paths:
        - archives/
  except:
    - master
    - qaul-ng

.tb_linuxcli: &baselinuxcli
  <<: *tb_def
  script:
    - mkdir build; cd build
    - cmake .. -DCMAKE_BUILD_TYPE=DEBUG -DGUI=CLI -DVOIP=OFF
    - make package
    - make test

.tb_linux: &baselinux
  <<: *tb_def
  script:
    - mkdir build; cd build
    - cmake .. -DCMAKE_BUILD_TYPE=DEBUG
    - make package
    - make test

Ubuntu1604_64_CLI:
  <<: *baselinuxcli
  tags:
    - ubuntu1604_64

Ubuntu1604_32_CLI:
  <<: *baselinuxcli
  tags:
    - ubuntu1604_32

Ubuntu1604_64:
  <<: *baselinux
  tags:
    - ubuntu1604_64

Ubuntu1604_32:
  <<: *baselinux
  tags:
    - ubuntu1604_32

RaspianStretch_CLI:
  <<: *baselinuxcli
  tags:
    - raspian-stretch

RaspianStretch:
  <<: *baselinux
  tags:
    - raspian-stretch

Ubuntu1604_64_Release:
  <<: *tb_def
  script:
    - mkdir build; cd build
    - cmake .. -DCMAKE_BUILD_TYPE=RELEASE
    - make package
    - make test
  tags:
    - ubuntu1604_64

##### droiden

.tb_android: &androidbase
  <<: *tb_def
  tags:
    - android

Android_legacy:
  <<: *androidbase
  script:
    - cd android
    - echo "ndk.dir=${ANDROID_NDK}" > local.properties
    - echo "sdk.dir=${ANDROID_SDK}" >> local.properties
    - ./gradlew --continue assembleLegacyDebug

Android_nativeui:
  <<: *androidbase
  script:
    - cd android
    - echo "ndk.dir=${ANDROID_NDK}" > local.properties
    - echo "sdk.dir=${ANDROID_SDK}" >> local.properties
    - ./gradlew --continue assembleNativeuiDebug

Android_noroot:
  <<: *androidbase
  script:
    - cd android
    - echo "ndk.dir=${ANDROID_NDK}" > local.properties
    - echo "sdk.dir=${ANDROID_SDK}" >> local.properties
    - ./gradlew --continue assembleNorootDebug

Android_noroot_Release:
  <<: *androidbase
  script:
    - cd android
    - echo "ndk.dir=${ANDROID_NDK}" > local.properties
    - echo "sdk.dir=${ANDROID_SDK}" >> local.properties
    - ./gradlew --continue assembleNorootRelease

OSX:
  stage: build
  when: manual
  cache:
    paths:
        - archives/
  script:
    - mkdir build; cd build; cmake ..; make VERBOSE=1
    - ./make_dmg.sh
  except:
    - master
    - qaul-ng
  tags:
    - osx

Windows:
  stage: build
  when: manual
  cache:
    paths:
        - archives/
  script:
    - PATH="/mingw32/bin:$PATH"; declare -x MSYSTEM="MINGW32"; declare -x MSYSCON="mintty.exe"
    - mkdir build; cd build; cmake .. -G "MSYS Makefiles" -DGUI=NATIVE; make VERBOSE=1
    - cd src/client/win; mkdir build; cd build; cmake ..
    - cmake --build . --target qaul --config Release
    - cpack -C Release
  except:
    - master
    - qaul-ng
  tags:
    - windows
